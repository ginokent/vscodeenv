#!/usr/bin/env bash
set -eu
[ "${BASH_VERSINFO[0]}" -ge 3 ] && set -E -o pipefail
export IFS=$'\n\t'
export LC_ALL=C

# MIT License Copyright (c) 2021 ginokent https://github.com/rec-logger/rec.sh
# Common
_recRFC3339() { date "+%Y-%m-%dT%H:%M:%S%z" | sed "s/\(..\)$/:\1/"; }
_recCmd() { for a in "$@"; do if echo "${a:-}" | grep -Eq "[[:blank:]]"; then printf "'%s' " "${a:-}"; else printf "%s " "${a:-}"; fi; done | sed "s/ $//"; }
# Color
RecDefault() { test "  ${REC_SEVERITY:-0}" -gt 000 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;35m  DEFAULT\\033[0m] \"\$0\"\"}" 1>&2; }
RecDebug() { test "    ${REC_SEVERITY:-0}" -gt 100 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;34m    DEBUG\\033[0m] \"\$0\"\"}" 1>&2; }
RecInfo() { test "     ${REC_SEVERITY:-0}" -gt 200 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;32m     INFO\\033[0m] \"\$0\"\"}" 1>&2; }
RecNotice() { test "   ${REC_SEVERITY:-0}" -gt 300 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;36m   NOTICE\\033[0m] \"\$0\"\"}" 1>&2; }
RecWarning() { test "  ${REC_SEVERITY:-0}" -gt 400 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;33m  WARNING\\033[0m] \"\$0\"\"}" 1>&2; }
RecError() { test "    ${REC_SEVERITY:-0}" -gt 500 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;31m    ERROR\\033[0m] \"\$0\"\"}" 1>&2; }
RecCritical() { test " ${REC_SEVERITY:-0}" -gt 600 2>/dev/null || echo "$*" | awk "{print \"$(_recRFC3339) [\\033[0;1;31m CRITICAL\\033[0m] \"\$0\"\"}" 1>&2; }
RecAlert() { test "    ${REC_SEVERITY:-0}" -gt 700 2>/dev/null || echo "$*" | awk "{print   \"$(_recRFC3339) [\\033[0;41m    ALERT\\033[0m] \"\$0\"\"}" 1>&2; }
RecEmergency() { test "${REC_SEVERITY:-0}" -gt 800 2>/dev/null || echo "$*" | awk "{print \"$(_recRFC3339) [\\033[0;1;41mEMERGENCY\\033[0m] \"\$0\"\"}" 1>&2; }
RecExec() { RecInfo "$ $(_recCmd "$@")" && "$@"; }
RecRun() { _dlm="####R#E#C#D#E#L#I#M#I#T#E#R####" _all=$({ _out=$("$@") && _rtn=$? || _rtn=$? && printf "\n%s" "${_dlm:?}${_out:-}" && return ${_rtn:-0}; } 2>&1) && _rtn=$? || _rtn=$? && _dlmno=$(echo "${_all:-}" | sed -n "/${_dlm:?}/=") && _cmd=$(_recCmd "$@") && _stdout=$(echo "${_all:-}" | tail -n +"${_dlmno:-1}" | sed "s/^${_dlm:?}//") && _stderr=$(echo "${_all:-}" | head -n "${_dlmno:-1}" | grep -v "^${_dlm:?}") && RecInfo "$ ${_cmd:-}" && { [ -z "${_stdout:-}" ] || RecInfo "${_stdout:?}"; } && { [ -z "${_stderr:-}" ] || RecWarning "${_stderr:?}"; } && return ${_rtn:-0}; }
# export functions for bash
# shellcheck disable=SC3045
echo "${SHELL-}" | grep -q bash$ && export -f _recRFC3339 _recCmd RecDefault RecDebug RecInfo RecWarning RecError RecCritical RecAlert RecEmergency RecExec RecRun

CommandNotFound () { ! command -v "${1:?"CommandNotFound: \$1 as command is required"}" >/dev/null; }

# const
PROG_NAME=vscodeenv
VISUAL_STUDIO_CODE="Visual Studio Code"
VSCODE_DOWNLOAD_URL_PREFIX="https://update.code.visualstudio.com"
NOT_FOUND_VERSIONS=("0\.10\.1" "0\.10\.6" "1\.7\.0")  # NOTE: git ls-remote --tags https://github.com/microsoft/vscode | grep -Eo "refs/tags/[0-9]+\.[0-9]+\.[0-9]+$" | sed "s@refs/tags/\(.*\)@https://update.code.visualstudio.com/\1/darwin/stable@" | sort -V | while read -r LINE; do echo "$LINE $(curl -ILsS -o /dev/null -w "%{http_code}" $LINE)"; done | grep -v "200$"
DATA_DIR="${HOME:?}/.${PROG_NAME:?}"
ARCHIVES_DIR="${DATA_DIR:?}/archives"
HOME_TMP_DIR="${DATA_DIR:?}/tmp"
BACKUP_DIR="${DATA_DIR:?}/backup"
VERSION_REGEX="[0-9]+\.[0-9]+\.[0-9]+"
UPDATE_DL_TMP="/tmp/.${PROG_NAME:?}.tmp"

# env
OS=darwin
CHANNEL=stable
VSCODE_DOWNLOAD_URL_SUFFIX="${OS:?}/${CHANNEL:?}"
SELF_UPDATE_URL="https://raw.githubusercontent.com/ginokent/vscodeenv/HEAD/bin/${PROG_NAME:?}-${OS:?}"
APPLICATIONS="/Applications"
VISUAL_STUDIO_CODE_APP="${VISUAL_STUDIO_CODE:?}.app"
APPLICATIONS_VISUAL_STUDIO_CODE_APP="${APPLICATIONS:?}/${VISUAL_STUDIO_CODE_APP:?}"
CODE_EXE="${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}/Contents/Resources/app/bin/code"
CODE_EXE_SYMBOLIC_LINK=${CODE_PATH:="~/bin/code"}

# var
grep_cond_not_found_versions=$(i=0; for version in "${NOT_FOUND_VERSIONS[@]}"; do i=$((i+1)); echo -n "${version:?}"; [[ $i -ge ${#NOT_FOUND_VERSIONS[@]} ]] || echo -n "|"; done;)  # NOTE: like this: "0.10.1|0.10.6|1.7.0"
version_list=""
url_list=""

__checkOS () {
  os=$(uname -s | tr "[:upper:]" "[:lower:]")
  if [[ ${os:=null} != "${OS:?}" ]] ;then
    RecError "This OS is not supported: ${os:?}"
    exit 1
  fi
}

__commandRequired () {
  if CommandNotFound "${1:?}"; then
    RecError "'${1:?}' is required"
    exit 1
  fi
}

__init () {
  __checkOS
  __commandRequired wget
  __commandRequired git

  mkdir -p "${ARCHIVES_DIR:?}"
}

__resetTmpDir () {
  tmp_dir=${1:?}
  rm -rf "${tmp_dir:?}"
  mkdir -p "${tmp_dir:?}"
}

__getVersionList () {
  [[ "${version_list-}" ]] || version_list=$(git ls-remote --tags https://github.com/microsoft/vscode |
    grep -Eo "refs/tags/${VERSION_REGEX:?}$" |
    sed "s@refs/tags/@@" |
    sort -V |
    grep -Ev "^(${grep_cond_not_found_versions:?})$"
    # string "latest" is also treated as version
    echo latest
  )
  echo "${version_list:?}"
}

__getURLList () {
  [[ "${url_list-}" ]] || url_list=$(__getVersionList | awk "{print \"${VSCODE_DOWNLOAD_URL_PREFIX:?}/\"\$0\"/${VSCODE_DOWNLOAD_URL_SUFFIX:?}\"}")
  echo "${url_list:?}"
}

__getVersionURLExit0 () {
  version="${1:?}"
  __getURLList | grep "/${version:?}/" || true
}

__getLatestVersion () {
  __getVersionList | tail -n 1
}

__getZipDestinationPath () {
  version="${1:?}"
  printf "%s" "${ARCHIVES_DIR:?}/VSCode-${version:?}-${OS:?}.zip"
}

__extractVersionExit0 () {
  echo "${1:-}" | grep -Eo "${VERSION_REGEX:?}|latest" || true
}

__currentVersion () {
  __extractVersionExit0 "$("${CODE_EXE:?}" --version 2>/dev/null)"
}

__wget () {
  source_url="${1:?}"
  destination_path="${2:?}"
  shift && shift
  RecInfo "download ${source_url:?} -> ${destination_path:?}"
  RecExec wget "${source_url:?}" --output-document="${destination_path:?}" "$@"
}

__unzipWithResetTmpDir () {
  zip_path="${1:?}"
  unzip_tmp_path="${2:?}"
  __resetTmpDir "${unzip_tmp_path:?}"
  RecInfo "unzip '${zip_path:?}' -> '${unzip_tmp_path:?}/${VISUAL_STUDIO_CODE_APP:?}'"
  RecExec unzip -q -o "${zip_path:?}" -d "${unzip_tmp_path:?}" "${VISUAL_STUDIO_CODE_APP:?}/*"
}

__mustGetVersion () {
  if [[ ${1-} =~ (^|.*[^[:graph:]]+)(-f|--force)([^[:graph:]]+.*|$) ]]; then
    # If fource option, shift argument
    shift
  fi

  version="${1-}"

  # NOTE: https://stackoverflow.com/questions/19120263/why-exit-code-141-with-grep-q
  if __getVersionList | grep -E "^${version-}$" >/dev/null; then
    echo "${version:?}"
  elif [[ -n ${version-} ]]; then
    RecError "version not found: ${version-}"
    RecError "check the available versions: $0 list"
    exit 1
  else
    RecNotice "no version was specified. use latest version"
    __getLatestVersion
  fi
}

__mustGetSpecificVersionURL () {
  version="${1:?}"
  url=$(__getVersionURLExit0 "${version:?}")
  if [[ "${url-}" ]]; then
    echo "${url:?}"
  else
    RecError "version not found: ${version-}"
    RecError "check the available versions: $0 list"
    exit 1
  fi
}

__createCodeBinSymbolicLink () {
  if [[ -f "${CODE_EXE:?}" ]]; then
    if ! command -v code 1>/dev/null && [[ ! -L ${CODE_EXE_SYMBOLIC_LINK:?} ]] && [[ ! -f ${CODE_EXE_SYMBOLIC_LINK:?} ]]; then
      RecInfo "create symblic link '${CODE_EXE:?}' -> '${CODE_EXE_SYMBOLIC_LINK:?}'"
      RecExec ln -sf "${CODE_EXE:?}" "${CODE_EXE_SYMBOLIC_LINK:?}"
    elif [[ $(wc -c < "${CODE_EXE:?}") -eq $(wc -c < "${CODE_EXE_SYMBOLIC_LINK:?}") ]]; then
      # If '/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code' size == '/usr/local/bin/code' size
      return 0
    else
      RecWarning "'${CODE_EXE_SYMBOLIC_LINK:?}' already exists"
    fi
  fi
}


__existsApplicationsVisualStudioCodeApp () {
  [[ -L "${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}" ]] || [[ -d "${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}" ]]
}


__launch () {
  RecInfo "launch '${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}'"
  RecExec open -a "${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}"
}

__currentVersionExit0 () {
  RecInfo "current version"
  RecExec "${CODE_EXE:?}" --version || true
}

__hasOptionListExtensions () {
  "${CODE_EXE:?}" --help 2>&1 | grep -q -- "--list-extensions"
}

__hasOptionShowVersions () {
  # NOTE: '--show-versions' option -> 1.7.1 or later
  "${CODE_EXE:?}" --help 2>&1 | grep -q -- "--show-versions"
}

__generateInstallCommand () {
  currentVersion=$(__currentVersion)

  if "${CODE_EXE:?}" --help >/dev/null 2>&1; then
    echo "${PROG_NAME:?} install ${currentVersion:?}"
    return 0
  else
    echo "# !!! ${PROG_NAME:?} does not support to lock version on this ${VISUAL_STUDIO_CODE:?} version !!!"
    return 0
  fi
}

__generateExtensionsInstallCommands () {
  if __hasOptionListExtensions; then
    if __hasOptionShowVersions; then
      # --list-extensions AND --show-versions
      "${CODE_EXE:?}" --list-extensions --show-versions | sort -V | awk "{print \"'${CODE_EXE:?}' --install-extension \"\$0\" --force\"}"
      return $?
    fi
    # --list-extensions ONLY
    "${CODE_EXE:?}" --list-extensions | sort -V | awk "{print \"'${CODE_EXE:?}' --install-extension \"\$0\" --force\"}"
    return $?
  else
    echo "# !!! ${PROG_NAME:?} does not support to lock the extensions version on this ${VISUAL_STUDIO_CODE:?} version !!!"
    return 0
  fi
}

__freeze () {
  installCommand=$(__generateInstallCommand)
  extensionsInstallCommands=$(__generateExtensionsInstallCommands)
  cat <<EOF
#!/bin/sh
# Code generated by ${PROG_NAME:?} freeze; This code is ${PROG_NAME:?} version lock script.
set -eu

# ${VISUAL_STUDIO_CODE:?}
${installCommand:?}

# Extensions
${extensionsInstallCommands:?}
EOF
}

__install () {
  version=$(__mustGetVersion "${1-}")
  source_url=$(__mustGetSpecificVersionURL "${version:?}")
  destination_path=$(__getZipDestinationPath "${version:?}")

  RecInfo "install '${VISUAL_STUDIO_CODE_APP:?}' version ${version:?}"

  if __existsApplicationsVisualStudioCodeApp; then
    RecWarning "'${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}' already installed"
    __currentVersionExit0
    if ! [[ $* =~ (^|.*[^[:graph:]]+)(-f|--force)([^[:graph:]]+.*|$) ]]; then
      # If force option is false,
      RecNotice "If you want to overwrite install, use '--force' option"
      return 0
    fi
  fi

  # download and unzip
  __wget "${source_url:?}" "${destination_path:?}" --continue
  if ! __unzipWithResetTmpDir "${destination_path:?}" "${HOME_TMP_DIR:?}"; then
    RecWarning "failed to unzip ${destination_path:?}, retry to download ${source_url:?}"
    # retry once "wget" without "--continue" option
    __wget "${source_url:?}" "${destination_path:?}"
    if ! __unzipWithResetTmpDir "${destination_path:?}" "${HOME_TMP_DIR:?}"; then
      RecError "failed to unzip ${destination_path:?}"
      exit 1
    fi
  fi

  # backup
  if __existsApplicationsVisualStudioCodeApp; then
    __resetTmpDir "${BACKUP_DIR:?}"
    RecInfo "backup '${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}' -> ${BACKUP_DIR:?}"
    RecExec mv "${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}" "${BACKUP_DIR:?}"
  fi

  # mv
  RecInfo "install '${HOME_TMP_DIR:?}/${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}' -> '${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}'"
  RecExec mv "${HOME_TMP_DIR:?}/${VISUAL_STUDIO_CODE_APP:?}" "${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}"

  # ln -s
  __createCodeBinSymbolicLink

  __currentVersionExit0
  __launch
}

__list () {
  if [[ $* =~ [^[:graph:]]+(-1|--one-column)([^[:graph:]]+.*|[^[:graph:]]*$) ]]; then
    __getVersionList
    return 0
  fi
  __getVersionList | column
}

__kill () {
  RecExec bash -c "pgrep -f \"${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}\" | xargs kill"
}

__selfUpdate () {
  RecInfo "self update"
  cmd="wget \"${SELF_UPDATE_URL:?}\" --output-document=\"${UPDATE_DL_TMP:?}\"; chmod -v +x \"${UPDATE_DL_TMP:?}\"; mv \"${UPDATE_DL_TMP:?}\" \"$0\""
  if [[ -w $0 ]] || { [[ -w $(dirname "$0") ]] && [[ ! -e $0 ]]; }; then RecExec bash -c "${cmd:?}"; else RecExec sudo -u root bash -c "${cmd:?}"; fi
  RecInfo "updated"
}

__usage () {
  cat <<USAGE

${PROG_NAME:?} is a tool for helping to install specific version '${VISUAL_STUDIO_CODE:?}'

Usage:

  ${PROG_NAME:?} <command> [arguments]

The commands are:

    freeze      Generate version lock script

    install     Install specific version '${VISUAL_STUDIO_CODE:?}'

                arguments
                    <version>
                        '${VISUAL_STUDIO_CODE:?}' version
                        If not given, install latest version
                options
                    -f, --fource
                        Fource install

    kill        Kill '${APPLICATIONS_VISUAL_STUDIO_CODE_APP:?}'

    list        List installable '${VISUAL_STUDIO_CODE:?}' versions

                arguments
                    -1, --one-column
                        If you want to output a single column, add this option

    self-update Update '${PROG_NAME:?}' itself

USAGE
}

__main () {
  # subcommand
  case "${1-}" in
    (   freeze|f) __init; shift; __freeze     "$@" ;;
    (  install|i) __init; shift; __install    "$@" ;;
    (       kill) __init; shift; __kill       "$@" ;;
    (     list|l) __init; shift; __list       "$@" ;;
    (self-update) __init; shift; __selfUpdate "$@" ;;
    (          *) __usage ;;
  esac
}

__main "$@"
